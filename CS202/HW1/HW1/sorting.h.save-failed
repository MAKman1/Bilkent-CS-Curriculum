#include <iostream>
#include "sorting.h"
using namespace std;


int main() {
    int a = 0;
    int b = 0;
    int temp1[16] = {7, 3, 6, 12, 13, 4, 1, 9, 15, 0, 11, 14, 2, 8, 10, 5};
    int temp2[16] = {7, 3, 6, 12, 13, 4, 1, 9, 15, 0, 11, 14, 2, 8, 10, 5};
    int temp3[16] = {7, 3, 6, 12, 13, 4, 1, 9, 15, 0, 11, 14, 2, 8, 10, 5};
    int temp4[16] = {7, 3, 6, 12, 13, 4, 1, 9, 15, 0, 11, 14, 2, 8, 10, 5};

    bubbleSort( temp1, 16, a, b);
    printArray( temp1, 16);

    quickSort( temp2, 16, a, b);
    printArray( temp2, 16);

    mergeSort( temp3, 16, a, b);
    printArray( temp3, 16);

    radixSort( temp4, 16);
    printArray( temp4, 16);

    performanceAnalysis();
    return 0;
}




#ifndef MAIN_SORTING_H
#define MAIN_SORTING_H

void bubbleSort(int *arr, int size, int &compCount, int &moveCount);

void quickSort(int *arr, int size, int &compCount, int &moveCount);
void quickImplementation(int *arr, int first, int last, int &compCount, int &moveCount);
void quickPartition(int *arr, int first, int last, int &pivotIndexint, int &compCount, int &moveCount);

void mergeSort(int *arr, int size, int &compCount, int &moveCount);
void mergeImplementation(int *arr, int first, int last, int &compCount, int &moveCount);
void mergeList(int *arr, int first, int mid, int last, int &compCount, int &moveCount);

void radixSort( int* arr, int size);
void countingSort( int* arr, int size, int base);
int fixBase( int number, int base);

void printArray(int *arr, int size);

void performanceAnalysis();

#endif //MAIN_SORTING_H
