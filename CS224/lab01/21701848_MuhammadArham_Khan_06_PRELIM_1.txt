.text
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall
	
	#input the integer
	li $v0, 5	# syscall 5 reads an integer
	syscall
	
	#comparing the number to see if its less than 20
	blt $v0,21,func
	
	li $v0,10
	syscall
	
	func:
		#array first index
		lui $s0, 0x1000
		ori $s0, $s0, 0x7000
		
		add $t0, $0, $0
		add $t1, $0, $v0	
		
		loopA:
			beq	$t0, $t1, funcB
			
			la $a0,promptB	# output prompt message on terminal
			li $v0,4	# syscall 4 prints the string
			syscall
			li $v0, 5	# syscall 5 reads an integer
			syscall
			
			sw $v0, 0($s0)
			addi $s0, $s0, 4
			
			addi	$t0, $t0, 1
			j	loopA

	funcB:
		lui	$s0, 0x1000
		ori	$s0, $s0, 0x7000
		
		add	$t0, $0, $0
		
		loopB:
			beq	$t0, $t1, funcC
			
			#outputting the current value of array
			lw	$t5, 0($s0)
			li	$v0,1
			move	$a0, $t5
			syscall
			
			la	$a0,newline
			li	$v0,4
			syscall
			
			addi	$s0, $s0, 4
			addi	$t0, $t0, 1
			j	loopB
			
	funcC:
		lui	$s1, 0x1000
		ori	$s1, $s1, 0x7000 #final array pointer
	
		add	$t0, $0, $0
		addi	$t2, $t1, -1
		
		loopC: 
			beq	$t0, $t2, funcD
			
			addi	$s1, $s1, 4
			addi	$t0, $t0, 1
			
			j	loopC
			
	funcD:
	
		lui	$s0, 0x1000
		ori	$s0, $s0, 0x7000 #initial array pointer
		
		sra	$t4, $t1, 1
		
		add	$t0, $0, $0
		
		loopD:
			bge	$t0, $t4, funcE
			
			lw	$t6, 0($s0)
			lw	$t7, 0($s1)
			sw	$t7, 0($s0)
			sw	$t6, 0($s1)
			
			addi	$t0, $t0, 1
			addi	$s0, $s0, 4
			addi	$s1, $s1, -4
			
			j	loopD
	
	funcE:
		la	$a0, reversed	# output prompt message on terminal
		li	$v0,4	# syscall 4 prints the string
		syscall
		
		add	$t0, $0, $0
		
		lui	$s0, 0x1000
		ori	$s0, $s0, 0x7000 #initial array pointer
		
		loopE:
			beq	$t0, $t1, endCall
			
			lw	$t5, 0($s0)
			li	$v0,1
			move	$a0, $t5
			syscall
			
			la	$a0,newline
			li	$v0,4
			syscall
			
			addi	$s0, $s0, 4
			addi	$t0, $t0, 1
			j	loopE
			
	endCall:
		li	$v0,10		# system call to exit
		syscall		#    bye bye
			
.data
	prompt:		.asciiz "Enter number of array elements lower than or equal to 20: "
	promptB:	.asciiz "Enter number to be entered: "
	newline:	.asciiz "\n"
	reversed:	.asciiz "the reversed numbers are: \n"


.text
	la	$a0, prompt
        li	$v0,4
        syscall
        #inputting string
        la 	$a0, stringBuffer
        li	$a1, 50
        li	$v0,8
        syscall
        
       
        add	$t0, $a0, $0#t0 is initial index
        add	$t9, $a0, $0
        add	$t3, $0, $0 #t3 is the length
        
        calculateLength:
        	#finding the string length
        	lb	$t1, 0($t0)
        	beq	$t1, $0, findFinalIndex
        	
        	addi	$t0, $t0, 1
        	addi	$t3, $t3, 1
        	
        	j	calculateLength
        
        findFinalIndex:
        	add	$t0, $t9, $0
        	add	$t1, $t0, $0 #t1 is the final index
        	add 	$t4, $0, $0
        	addi	$t5, $t3, -2 #temp variable to iterate to lower length
        	
        	loopIndex:
        		beq	$t4, $t5, checkPalindrome
			
			addi	$t1, $t1, 1
			addi	$t4, $t4, 1
			
			j	loopIndex
			
	checkPalindrome:
		#checking the palindromes through loop
		bgt	$t0, $t1, palindromeOutput
		lb	$t4, 0($t0)
		lb	$t5, 0($t1)
		bne	$t4, $t5, notPalindromeOutput
		
		addi	$t0, $t0, 1
		addi	$t1, $t1, -1
		
		j	checkPalindrome
		
	palindromeOutput:
		la	$a0, pal
        	li	$v0,4
        	syscall
        	
        	li	$v0,10
         	syscall
	
	notPalindromeOutput:
        	la	$a0, notPal
        	li	$v0,4
        	syscall
        	
        	li	$v0,10
         	syscall
        	
.data
	stringBuffer:	.space 50
	prompt:		.asciiz "Enter the string for palindrome check: "
	pal:		.asciiz "Yes, it is a palindrome."
	notPal:		.asciiz "No, it is not a palindrome."


.text
	la	$a0, prompt
        li	$v0,4
        syscall
        
        la	$a0, prompt1
        li	$v0,4
        syscall
        
        li	$v0, 5	# input the value of c
	syscall
	add	$t0, $v0, $0 #t0 is c
	
	la	$a0, prompt2
        li	$v0,4
        syscall
        
        li	$v0, 5	# input the value of d
	syscall
	add	$t1, $v0, $0 #t1 is d
	sub	$t2, $t0, $t1 #t2 stores the c - d
	
	blt	$t2, $0, fixNegative
	
	#output if the difference is positive
	sra	$t3, $t2, 4
	mul	$t4, $t3, 16
	sub	$t4, $t2, $t4 
	
	move	$a0,$t4	# print result
	li	$v0, 1
	syscall
	
	li	$v0,10
        syscall
	
	fixNegative:
		sub	$t3, $0, $t2
		
		#output if the difference is positive
		sra	$t4, $t3, 4
		mul	$t5, $t4, 16
		sub	$t5, $t3, $t5 
		sub	$t5, $0, $t5
		
		move	$a0,$t5	# print result
		li	$v0, 1
		syscall
		
		li	$v0,10
        	syscall

.data
	prompt: .asciiz "Evaluation of x = (c - d) % 16\n==============================\n"
	prompt1: .asciiz "Enter the value of c: "
	prompt2: .asciiz "Enter the value of d: "
